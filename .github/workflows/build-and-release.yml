name: MAria2 Cross-Platform Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  PROJECT_NAME: MAria2.Presentation.WinUI
  SOLUTION_NAME: MAria2.sln

permissions:
  contents: write
  packages: write
  actions: write

jobs:
  validate-project:
    runs-on: ubuntu-24.04
    steps:
    - uses: actions/checkout@v4
    - name: Validate Project Structure
      run: |
        if [ ! -f "${{ env.SOLUTION_NAME }}" ]; then
          echo "Solution file not found: ${{ env.SOLUTION_NAME }}"
          exit 1
        fi
        if [ ! -d "${{ env.PROJECT_NAME }}" ]; then
          echo "Project directory not found: ${{ env.PROJECT_NAME }}"
          exit 1
        fi

  build:
    needs: validate-project
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            rid: linux-x64
            artifact-name: MAria2-linux
            package-type: tar.gz
            install-deps: |
              sudo apt-get update
              sudo apt-get install -y rpm ruby ruby-dev build-essential
              sudo gem install fpm
          - os: macos-latest
            rid: osx-x64
            artifact-name: MAria2-macos
            package-type: dmg
            install-deps: |
              brew install create-dmg
          - os: windows-2022
            rid: win-x64
            artifact-name: MAria2-windows
            package-type: exe
            install-deps: |
              choco install innosetup

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Install Platform Dependencies
      shell: pwsh
      run: |
        if ("${{ matrix.os }}" -eq "windows-2022") {
          try {
            choco install innosetup -y
            if ($LASTEXITCODE -ne 0) {
              throw "Chocolatey installation failed"
            }
          } catch {
            Write-Error "Failed to install Inno Setup: $_"
            exit 1
          }
        }

    - name: Restore dependencies
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
          dotnet restore ${{ env.SOLUTION_NAME }} /p:EnableWindowsTargeting=false
        else
          dotnet restore ${{ env.SOLUTION_NAME }}
        fi
      shell: bash

    - name: Build
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
          dotnet build ${{ env.SOLUTION_NAME }} -c Release --no-restore \
            -p:RuntimeIdentifier=${{ matrix.rid }} \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -p:EnableWindowsTargeting=false
        else
          dotnet build ${{ env.SOLUTION_NAME }} -c Release --no-restore \
            -p:RuntimeIdentifier=${{ matrix.rid }} \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true
        fi
      shell: bash

    - name: Publish
      run: |
        if [ "${{ matrix.os }}" == "ubuntu-24.04" ]; then
          dotnet publish ${{ env.PROJECT_NAME }} \
            -c Release \
            -r ${{ matrix.rid }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -p:EnableWindowsTargeting=false \
            -o ./publish/${{ matrix.artifact-name }}
        else
          dotnet publish ${{ env.PROJECT_NAME }} \
            -c Release \
            -r ${{ matrix.rid }} \
            --self-contained true \
            -p:PublishSingleFile=true \
            -p:PublishTrimmed=true \
            -o ./publish/${{ matrix.artifact-name }}
        fi
      shell: bash

    - name: Package Windows
      if: matrix.os == 'windows-2022'
      shell: pwsh
      run: |
        try {
          iscc /Q /F"MAria2-Installer" .\installer\windows-installer.iss
          Move-Item -Path .\MAria2-Installer.exe -Destination ./publish/${{ matrix.artifact-name }}/ -ErrorAction Stop
        } catch {
          Write-Error "Windows packaging failed: $_"
          exit 1
        }

    - name: Package macOS
      if: matrix.os == 'macos-latest'
      run: |
        create-dmg \
          --volname "MAria2 Installer" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --app-drop-link 600 185 \
          --background ./installer/macos-background.png \
          ./publish/${{ matrix.artifact-name }}/MAria2.dmg \
          ./publish/${{ matrix.artifact-name }}/ || exit 1

    - name: Package Linux
      if: matrix.os == 'ubuntu-24.04'
      run: |
        tar -czvf ./publish/${{ matrix.artifact-name }}/MAria2.tar.gz -C ./publish/${{ matrix.artifact-name }} .
        fpm -s dir -t deb -n maria2 -v 1.0.0 ./publish/${{ matrix.artifact-name }} || exit 1
        fpm -s dir -t rpm -n maria2 -v 1.0.0 ./publish/${{ matrix.artifact-name }} || exit 1

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: ./publish/${{ matrix.artifact-name }}
        retention-days: 5
        overwrite: true
        compression-level: 9

  release:
    needs: build
    runs-on: ubuntu-24.04
    if: github.event_name == 'release'
    
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
        merge-multiple: true

    - name: Verify Artifacts
      run: |
        for artifact in MAria2-linux MAria2-macos MAria2-windows; do
          if [ ! -d "./artifacts/$artifact" ]; then
            echo "Artifact $artifact is missing"
            exit 1
          fi
        done

    - name: Upload Release Assets
      uses: actions/github-script@v7
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          const artifacts = ['MAria2-linux', 'MAria2-macos', 'MAria2-windows'];
          
          for (const artifact of artifacts) {
            const artifactPath = path.join('./artifacts', artifact);
            const files = fs.readdirSync(artifactPath);
            
            for (const file of files) {
              const filePath = path.join(artifactPath, file);
              
              try {
                await github.rest.repos.uploadReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: ${{ github.event.release.id }},
                  name: file,
                  data: fs.readFileSync(filePath)
                });
                console.log(`Uploaded: ${file}`);
              } catch (error) {
                console.error(`Failed to upload ${file}: ${error.message}`);
              }
            }
          }
